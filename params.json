{"name":"Nanohttpd","tagline":"Tiny, easily embeddable HTTP server in Java","body":"## What is \"nanohttpd\"?\r\n\r\n*NanoHttpd* is a light-weight HTTP server designed for embedding in other applications.\r\n\r\n*NanoHttpd* has been released under a Modified BSD licence.\r\n\r\n## Core Features\r\n* Only one Java file.\r\n* 2 \"flavors\" - one strictly Java 1.1 compatible, one at \"current\" standards.\r\n* Released as open source, free software, under a Modified BSD licence.\r\n* No fixed config files, logging, authorization etc. (Implement by yourself if you need them.)\r\n* Supports parameter parsing of GET and POST methods  (+ rudimentary PUT support in 1.25)\r\n* Parameter names must be unique, with a helper method to extract multi-value parameters if needed.\r\n* Supports file upload (since version 1.2, 2010)\r\n* Never caches anything.\r\n* Doesn't limit bandwidth, request time or simultaneous connections.\r\n* All header names are converted lowercase so they don't vary between browsers/clients.\r\n* Very low memory overhead when processing even the largest of requests.\r\n* Temp file usage and threading model are easily cutomized\r\n\r\n## Webserver Features\r\n* Supports both dynamic content and file serving.\r\n* Default code serves files and shows all HTTP parameters and headers.\r\n* File server supports directory listing, ```index.html``` and ```index.htm```.\r\n* File server supports partial content (streaming).\r\n* File server supports ETags.\r\n* File server does the 301 redirection trick for directories without ```/```.\r\n* File server supports simple skipping for files (continue download).\r\n* File server serves also very long files without memory overhead.\r\n* Contains a built-in list of most common mime types.\r\n\r\n## How is the project managed?\r\n\r\nThe project is managed with a \"fork and pull-request\" pattern.  If you want to contribute, fork this repo and submit a pull-request of your changes when you're ready.  Anyone can create Issues, and pull requests should be tied back to an issue describing the purpose of the submitted code.\r\n\r\n## Where can I find the original (Java1.1) NanoHttpd?\r\n\r\nThe original (Java 1.1 project) and the Java 6 project merged in early 2013 to pool resources \r\naround \"NanoHttpd\" as a whole, regardless of flavor.  Development of the Java 1.1 version continues \r\nas a permanent branch (\"nanohttpd-for-java1.1\") in the main http://github.com/NanoHttpd/nanohttpd repository.\r\n\r\n## How do I use nanohttpd?\r\n\r\nFirstly take a look at the \"samples\" sub-module.  The sample code illustrates using NanoHttpd in various ways.\r\n\r\nSecondly, you can run the standalone *NanoHttpd Webserver*.\r\n\r\nOr, create your own class that extends `NanoHTTPD` and overrides the `serve()` method.  For example:\r\n\r\n```java\r\npublic class DebugServer extends NanoHTTPD {\r\n    /**\r\n     * Constructs an HTTP server on given port.\r\n     */\r\n    public DebugServer() {\r\n        super(8080);\r\n    }\r\n\r\n    @Override\r\n    public Response serve(String uri, Method method, Map<String, String> header, Map<String, String> parms, Map<String, String> files) {\r\n        StringBuilder sb = new StringBuilder();\r\n        sb.append(\"<html>\");\r\n        sb.append(\"<head><title>Debug Server</title></head>\");\r\n        sb.append(\"<body>\");\r\n        sb.append(\"<h1>Response</h1>\");\r\n        sb.append(\"<p><blockquote><b>URI -</b> \").append(uri).append(\"<br />\");\r\n        sb.append(\"<b>Method -</b> \").append(method).append(\"</blockquote></p>\");\r\n        sb.append(\"<h3>Headers</h3><p><blockquote>\").append(header).append(\"</blockquote></p>\");\r\n        sb.append(\"<h3>Parms</h3><p><blockquote>\").append(parms).append(\"</blockquote></p>\");\r\n        sb.append(\"<h3>Files</h3><p><blockquote>\").append(files).append(\"</blockquote></p>\");\r\n        sb.append(\"</body>\");\r\n        sb.append(\"</html>\");\r\n        return new Response(sb.toString());\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        ServerRunner.run(DebugServer.class);\r\n    }\r\n}\r\n```\r\n\r\n## Why fork the original repo?\r\n\r\nThe Java 6 version of *nanohttpd* was born when we realized that embedding Jetty inside our \r\nAndroid application was going to inflate the size without bringing along features that we \r\nwere going to need.  The search for a smaller more streamlined HTTP server lead us \r\nto *nanohttpd* as the project had started with exactly the same goals, but we wanted to \r\nclear up the old code - move from Java 1.1, run _static code analysis_ tools and cleanup \r\nthe findings and pull out sample/test code from the source.\r\n\r\nIn the words of the original founder of the project\r\n> I couldn't find a small enough, embeddable and easily modifiable HTTP server\r\n> that I could just copy and paste into my other Java projects. Every one of them\r\n> consisted of dozens of .java files and/or jars, usually with - from my point\r\n> of view - \"overkill features\" like servlet support, web administration,\r\n> configuration files, logging etc.\r\n\r\nSince that time we fixed a number of bugs, moved the build to _maven_ and pulled out \r\nthe samples from the runtime JAR to further slim it down.\r\n\r\nThe two projects pooled resources in early 2013, merging code-bases, to better support the\r\nuser base and reduce confusion over why _two_ NanoHttpd projects existed.\r\n\r\n## Version History (Java 1.1 version)\r\n\r\n* 1.27 (2013-04-01): Merged several bug fixes from github forks\r\n* 1.26 (2013-03-27): fixed an off-by one bug\r\n* 1.25 (2012-02-12): rudimetary PUT support, buffer size now configurable, support for etag \"if-none-match\" check, log output stream now configurable\r\n* 1.24 (2011-08-04): etags + video mime types (for HTML5 video streaming)\r\n* 1.23 (2011-08-02): better support for partial requests\r\n* 1.22 (2011-07-21): support for custom www root dir\r\n* 1.21 (2011-01-03): minor bug fixes\r\n* 1.2  (2010-12-31): file upload (by Konstantinos Togias) and some small bug fixes\r\n* 1.14 (2010-08-20): added a stop() function\r\n* 1.13 (2010-06-27): fixed a wrong case in 'range' header\r\n* 1.12 (2010-01-07): fixed a null ptr exception\r\n* 1.11 (2008-04-21): fixed a double URI decoding (caused problems when there was a percent-coded percent)\r\n* 1.10 (2007-02-09): improved browser compatibility by forcing headers lowercase; fixed a POST method over-read bug\r\n* 1.05 (2006-03-30): honor Content-Length header; support for clients that leave TCP connection open; better MIME support for symlinked files\r\n* 1.02 (2005-07-08): fixed a stream read starvation bug\r\n* 1.01 (2003-04-03): first published version\r\n\r\nThank you to everyone who has reported bugs and suggested fixes.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}